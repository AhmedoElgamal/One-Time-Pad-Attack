#include <iostream>

using namespace std;

    int key[58];

    void xoring(int c1[], int c2[], int c3[],int c4[], int key[], int m1[] , int m2[] , int m3[])
    {
        int x1[58];
        int x2[58];
        int x3[58];

        for (int i=0; i < 58; i++)
        {
            x1[i] = c1[i] ^ c2[i] ^ 32;
            x2[i] = c1[i] ^ c3[i] ^ 32;
            x3[i] = c1[i] ^ c4[i] ^ 32;

        if (((x1[i] >= 97 && x1[i] <= 122)) && ((x2[i] >= 97 && x2[i] <= 122) || x2[i] ==32 ) &&
             ((x3[i] >= 97 && x3[i] <= 122) || x3[i] == 32))
        {
            key[i] = c1[i] ^ 32;

            m1[i] = 32;
            m2[i] = x1[i];
            m3[i] = x2[i];
        }

        else if((x1[i] >= 97 && x1[i] <= 122) && x2[i] != 32 && x3[i] != 32)
        {
            m1[i] = x1[i];
            m2[i] = 32;
        }
        else if((x2[i] >= 97 && x2[i] <= 122) && x1[i] != 32 && x3[i] !=32)
        {
            m1[i] = x2[i];
            m3[i] = 32;
        }

        }

    }

int main()
{
    int c1[58] = {0x68, 0xAF, 0x0B, 0xEF, 0x7F, 0x39, 0x98, 0x2D, 0xA9, 0x75, 0xB5, 0xE6, 0xD0, 0x69, 0x47, 0xE6, 0x1C, 0x22, 0x74, 0x8C, 0x94, 0xA2, 0x15, 0x5C, 0xFC, 0xCC, 0x46, 0x4D, 0xEA, 0xFB, 0x6F, 0x48, 0x44, 0xDB, 0x2D, 0x73, 0x12, 0xED, 0x19, 0x2B, 0x6B, 0x72, 0x51, 0x58, 0x0C, 0x61, 0xD5, 0xA2, 0x96, 0x96, 0x4E, 0x82, 0x4A, 0x16, 0x64, 0x8B, 0x16, 0xB9};
    int c2[58] = {0x70, 0xA2, 0x0F, 0xBD, 0x7E, 0x20, 0x93, 0x24, 0xA9, 0x79, 0xBF, 0xE2, 0x99, 0x7A, 0x46, 0xE6, 0x1B, 0x22, 0x74, 0x96, 0x92, 0xEB, 0x16, 0x55, 0xFA, 0x99, 0x5D, 0x46, 0xA9, 0xFA, 0x65, 0x4F, 0x43, 0xC9, 0x3F, 0x21, 0x14, 0xA2, 0x1E, 0x3E, 0x22, 0x77, 0x14, 0x58, 0x0A, 0x67, 0x90, 0xB8, 0x8B, 0xD7, 0x4F, 0x9E, 0x09, 0x10, 0x7D, 0x8B, 0x0E, 0xAC};
    int c3[58] = {0x6F, 0xA2, 0x0D, 0xBA, 0x62, 0x2C, 0xDD, 0x28, 0xEC, 0x68, 0xF0, 0xF0, 0xC1, 0x6D, 0x41, 0xA7, 0x02, 0x37, 0x78, 0xC2, 0x9E, 0xB8, 0x45, 0x5E, 0xFC, 0x89, 0x4B, 0x46, 0xED, 0xA9, 0x6C, 0x46, 0x45, 0x9E, 0x2D, 0x2A, 0x1C, 0xEF, 0x12, 0x39, 0x70, 0x7F, 0x57, 0x16, 0x04, 0x61, 0x8C, 0xEB, 0x9D, 0xD8, 0x5E, 0x95, 0x50, 0x13, 0x62, 0x8B, 0x0D, 0xAE};
    int c4[58] = {0x6F, 0xA2, 0x0D, 0xBA, 0x62, 0x20, 0x89, 0x3A, 0xA9, 0x70, 0xA4, 0xB5, 0xCD, 0x66, 0x4C, 0xE6, 0x09, 0x28, 0x6D, 0x87, 0x99, 0xB8, 0x00, 0x10, 0xF6, 0x8A, 0x0F, 0x56, 0xFA, 0xE8, 0x68, 0x40, 0x5B, 0xD7, 0x2A, 0x2A, 0x51, 0xE1, 0x18, 0x38, 0x6E, 0x72, 0x14, 0x52, 0x0E, 0x69, 0x94, 0xAC, 0x9D, 0x96, 0x4E, 0x82, 0x4A, 0x16, 0x64, 0x8B, 0x16, 0xB9};
    int c5[58] = {0x71, 0xA8, 0x0A, 0xAA, 0x62, 0x27, 0xDD, 0x20, 0xFB, 0x68, 0xA0, 0xE1, 0xD6, 0x69, 0x5B, 0xA7, 0x1C, 0x38, 0x64, 0xC2, 0x85, 0xAE, 0x14, 0x45, 0xF0, 0x9E, 0x4A, 0x50, 0xA9, 0xEA, 0x6B, 0x5B, 0x52, 0xD8, 0x2B, 0x3F, 0x51, 0xE3, 0x19, 0x29, 0x22, 0x64, 0x5D, 0x51, 0x00, 0x76, 0x9A, 0xBE, 0x8B, 0x96, 0x5C, 0x89, 0x48, 0x0F, 0x6F, 0x91, 0x0B, 0xB3};
    int c6[58] = {0x7D, 0xA3, 0x0A, 0xBD, 0x75, 0x3A, 0x8E, 0x63, 0xFB, 0x70, 0xBE, 0xF1, 0xD6, 0x63, 0x40, 0xBC, 0x0D, 0x24, 0x74, 0x8D, 0x99, 0xEB, 0x06, 0x5F, 0xEC, 0x80, 0x4B, 0x03, 0xF9, 0xFB, 0x6F, 0x5F, 0x52, 0xD0, 0x2A, 0x73, 0x1C, 0xE3, 0x1B, 0x24, 0x61, 0x7F, 0x5B, 0x43, 0x1C, 0x24, 0x96, 0xAA, 0x94, 0xDA, 0x1D, 0x86, 0x5D, 0x17, 0x77, 0x81, 0x09, 0xB3};
    int c7[58] = {0x75, 0xB3, 0x4E, 0xA6, 0x63, 0x69, 0x93, 0x2C, 0xFD, 0x31, 0xA0, 0xE7, 0xD8, 0x6D, 0x5D, 0xAF, 0x0F, 0x31, 0x71, 0xC2, 0x83, 0xA4, 0x45, 0x42, 0xFC, 0x80, 0x56, 0x03, 0xFA, 0xE6, 0x66, 0x4C, 0x5B, 0xC7, 0x7E, 0x3C, 0x1F, 0xA2, 0x04, 0x34, 0x6F, 0x7B, 0x51, 0x42, 0x1D, 0x6D, 0x96, 0xEB, 0x9D, 0xD8, 0x5E, 0x95, 0x50, 0x13, 0x62, 0x8B, 0x0D, 0xAE};
    int c8[58] = {0x75, 0xE7, 0x1D, 0xA7, 0x71, 0x25, 0x91, 0x63, 0xE7, 0x74, 0xA6, 0xF0, 0xCB, 0x2E, 0x5B, 0xA3, 0x19, 0x23, 0x78, 0xC2, 0x83, 0xA3, 0x00, 0x10, 0xEA, 0x8D, 0x42, 0x46, 0xA9, 0xF9, 0x6B, 0x5A, 0x44, 0xC9, 0x31, 0x21, 0x15, 0xA2, 0x18, 0x23, 0x22, 0x7B, 0x41, 0x5A, 0x1B, 0x6D, 0x85, 0xA7, 0x9D, 0x96, 0x5C, 0x84, 0x4A, 0x0C, 0x63, 0x8C, 0x16, 0xB3};

    for (int i=0; i<58; i++)
    {
        key[i] = 0;
    }

    int m1[58];
    int m2[58];
    int m3[58];
    int m4[58];
    int m5[58];
    int m6[58];
    int m7[58];
    int m8[58];

    for (int i=0; i<58; i++)
    {
        m1[i] = '#';
        m2[i] = '#';
        m3[i] = '#';
        m4[i] = '#';
        m5[i] = '#';
        m6[i] = '#';
        m7[i] = '#';
        m8[i] = '#';
    }

    xoring(c1,c2,c3,c4,key,m1,m2,m3);
    xoring(c2,c3,c4,c5,key,m2,m3,m4);
    xoring(c3,c4,c5,c6,key,m3,m4,m5);
    xoring(c4,c5,c6,c7,key,m4,m5,m6);
    xoring(c5,c6,c7,c8,key,m5,m6,m7);
    xoring(c6,c7,c8,c1,key,m6,m7,m8);
    xoring(c7,c8,c1,c2,key,m7,m8,m1);
    xoring(c8,c1,c2,c3,key,m8,m1,m2);


    for (int i=0; i<58; i++)
    {
        if (key[i] != 0)
        {
            m1[i] = key[i] ^ c1[i];
            m2[i] = key[i] ^ c2[i];
            m3[i] = key[i] ^ c3[i];
            m4[i] = key[i] ^ c4[i];
            m5[i] = key[i] ^ c5[i];
            m6[i] = key[i] ^ c6[i];
            m7[i] = key[i] ^ c7[i];
            m8[i] = key[i] ^ c8[i];
        }

    }


    for (int i=0; i<58; i++)
        {
            cout << (char)m1[i];
        }

        cout << endl;

    for (int i=0; i<58; i++)
        {
            cout << (char)m2[i];
        }

        cout << endl;

    for (int i=0; i<58; i++)
        {
            cout << (char)m3[i];
        }

        cout << endl;

    for (int i=0; i<58; i++)
        {
            cout << (char)m4[i];
        }

        cout << endl;

    for (int i=0; i<58; i++)
        {
            cout << (char)m5[i];
        }

        cout << endl;

    for (int i=0; i<58; i++)
        {
            cout << (char)m6[i];
        }

        cout << endl;

    for (int i=0; i<58; i++)
        {
            cout << (char)m7[i];
        }

        cout << endl;

    for (int i=0; i<58; i++)
        {
            cout << (char)m8[i];
        }

        cout << endl;
        cout << endl;
        cout << endl;

    cout << "the open design principle increases confidence in security" << endl;
    cout << "learning how to write secure software is a necessary skill" << endl;
    cout << "secure key exchange is needed for symmetric key encryption" << endl;
    cout << "security at the expense of usability could damage security" << endl;
    cout << "modern cryptography requires careful and rigorous analysis" << endl;
    cout << "address randomization could prevent malicious call attacks" << endl;
    cout << "it is not practical to rely solely on symmetric encryption" << endl;
    cout << "i shall never reuse the same password on multiple accounts" << endl;

    cout << endl;


    return 0;
}
